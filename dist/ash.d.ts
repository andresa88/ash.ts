// Generated by dts-bundle v0.7.3

declare module 'ash.ts' {
    export { Dictionary } from 'ash.ts/Dictionary';
    export { Signal0 } from 'ash.ts/signals/Signal0';
    export { Signal1 } from 'ash.ts/signals/Signal1';
    export { Signal2 } from 'ash.ts/signals/Signal2';
    export { Signal3 } from 'ash.ts/signals/Signal3';
    export { ComponentMatchingFamily } from 'ash.ts/core/ComponentMatchingFamily';
    export { Engine } from 'ash.ts/core/Engine';
    export { Entity } from 'ash.ts/core/Entity';
    export { IFamily } from 'ash.ts/core/IFamily';
    export { Node, keep } from 'ash.ts/core/Node';
    export { NodeList } from 'ash.ts/core/NodeList';
    export { NodePool } from 'ash.ts/core/NodePool';
    export { System } from 'ash.ts/core/System';
    export { EntityStateMachine } from 'ash.ts/fsm/EntityStateMachine';
    export { EngineStateMachine } from 'ash.ts/fsm/EngineStateMachine';
    export { ITickProvider } from 'ash.ts/tick/ITickProvider';
    export { RAFTickProvider } from 'ash.ts/tick/RAFTickProvider';
    export { ComponentPool } from 'ash.ts/tools/ComponentPool';
    export { ListIteratingSystem } from 'ash.ts/tools/ListIteratingSystem';
}

declare module 'ash.ts/Dictionary' {
    export class Dictionary<TKey, TValue> {
        constructor();
        set(key: TKey, value: TValue): TValue;
        get(key: TKey): TValue | null;
        has(key: TKey): boolean;
        remove(key: TKey): TValue | null;
        keys(): TKey[];
        values(): TValue[];
    }
}

declare module 'ash.ts/signals/Signal0' {
    import { SignalBase } from 'ash.ts/signals/SignalBase';
    export class Signal0 extends SignalBase<() => void> {
        dispatch(): void;
    }
}

declare module 'ash.ts/signals/Signal1' {
    import { SignalBase } from 'ash.ts/signals/SignalBase';
    export class Signal1<T> extends SignalBase<(a: T) => void> {
        dispatch(object: T): void;
    }
}

declare module 'ash.ts/signals/Signal2' {
    import { SignalBase } from 'ash.ts/signals/SignalBase';
    export class Signal2<T1, T2> extends SignalBase<(a: T1, b: T2) => void> {
        dispatch(object1: T1, object2: T2): void;
    }
}

declare module 'ash.ts/signals/Signal3' {
    import { SignalBase } from 'ash.ts/signals/SignalBase';
    export class Signal3<T1, T2, T3> extends SignalBase<(a: T1, b: T2, c: T3) => void> {
        dispatch(object1: T1, object2: T2, object3: T3): void;
    }
}

declare module 'ash.ts/core/ComponentMatchingFamily' {
    import { Dictionary } from 'ash.ts/Dictionary';
    import { Engine } from 'ash.ts/core/Engine';
    import { Entity } from 'ash.ts/core/Entity';
    import { IFamily } from 'ash.ts/core/IFamily';
    import { Node } from 'ash.ts/core/Node';
    import { NodeList } from 'ash.ts/core/NodeList';
    import { ClassType } from 'ash.ts/Types';
    export class ComponentMatchingFamily<TNode extends Node<any>> implements IFamily<TNode> {
        components: Dictionary<ClassType<any>, string>;
        constructor(nodeClass: {
            new (): TNode;
        }, engine: Engine);
        readonly nodeList: NodeList<TNode>;
        newEntity(entity: Entity): void;
        componentAddedToEntity(entity: Entity, componentClass: ClassType<any>): void;
        componentRemovedFromEntity(entity: Entity, componentClass: ClassType<any>): void;
        removeEntity(entity: Entity): void;
        cleanUp(): void;
    }
}

declare module 'ash.ts/core/Engine' {
    import { Entity } from 'ash.ts/core/Entity';
    import { Node } from 'ash.ts/core/Node';
    import { NodeList } from 'ash.ts/core/NodeList';
    import { Signal0 } from 'ash.ts/signals/Signal0';
    import { System } from 'ash.ts/core/System';
    export class Engine {
        updating: boolean;
        updateComplete: Signal0;
        familyClass: any;
        constructor();
        addEntity(entity: Entity): void;
        removeEntity(entity: Entity): void;
        getEntityByName(name: string): Entity | null;
        removeAllEntities(): void;
        readonly entities: Entity[];
        getNodeList<TNode extends Node<any>>(nodeClass: {
            new (): TNode;
        }): NodeList<TNode>;
        releaseNodeList<TNode extends Node<any>>(nodeClass: {
            new (): TNode;
        }): void;
        addSystem(system: System, priority: number): void;
        getSystem<TSystem extends System>(type: {
            new (...args: any[]): TSystem;
        }): TSystem | null;
        readonly systems: System[];
        removeSystem(system: System): void;
        removeAllSystems(): void;
        update(time: number): void;
    }
}

declare module 'ash.ts/core/Entity' {
    import { Signal2 } from 'ash.ts/signals/Signal2';
    import { Dictionary } from 'ash.ts/Dictionary';
    import { ClassType } from 'ash.ts/Types';
    export class Entity {
        typeName: string | null;
        userData: any | null;
        componentAdded: Signal2<Entity, ClassType<any>>;
        componentRemoved: Signal2<Entity, ClassType<any>>;
        nameChanged: Signal2<Entity, string>;
        previous: Entity | null;
        next: Entity | null;
        components: Dictionary<ClassType<any>, any>;
        constructor(name?: string);
        name: string;
        add<T>(component: T, componentClass?: ClassType<T> | null): this;
        remove<T>(componentClass: ClassType<T>): T | null;
        get<T>(componentClass: ClassType<T>): T;
        getAll(): any[];
        has<T>(componentClass: ClassType<T>): boolean;
    }
}

declare module 'ash.ts/core/IFamily' {
    import { Entity } from 'ash.ts/core/Entity';
    import { Node } from 'ash.ts/core/Node';
    import { NodeList } from 'ash.ts/core/NodeList';
    import { ClassType } from 'ash.ts/Types';
    export interface IFamily<TNode extends Node<any>> {
        nodeList: NodeList<TNode>;
        newEntity(entity: Entity): void;
        removeEntity(entity: Entity): void;
        componentAddedToEntity(entity: Entity, componentClass: ClassType<any>): void;
        componentRemovedFromEntity(entity: Entity, componentClass: ClassType<any>): void;
        cleanUp(): void;
    }
}

declare module 'ash.ts/core/Node' {
    import { Entity } from 'ash.ts/core/Entity';
    import { ClassType } from 'ash.ts/Types';
    export class Node<TNode> {
        entity: Entity;
        previous: TNode | null;
        next: TNode | null;
    }
    export function keep(type: ClassType<any>): Function;
}

declare module 'ash.ts/core/NodeList' {
    import { Signal1 } from 'ash.ts/signals/Signal1';
    import { Node } from 'ash.ts/core/Node';
    export class NodeList<TNode extends Node<any>> {
        head: TNode | null;
        tail: TNode | null;
        nodeAdded: Signal1<TNode>;
        nodeRemoved: Signal1<TNode>;
        constructor();
        add(node: TNode): void;
        remove(node: TNode): void;
        removeAll(): void;
        readonly empty: boolean;
        swap(node1: TNode, node2: TNode): void;
        insertionSort(sortFunction: Function): void;
        mergeSort(sortFunction: (a: TNode, b: TNode) => number): void;
    }
}

declare module 'ash.ts/core/NodePool' {
    import { Dictionary } from 'ash.ts/Dictionary';
    import { Node } from 'ash.ts/core/Node';
    import { ClassType } from 'ash.ts/Types';
    export class NodePool<TNode extends Node<any>> {
        constructor(nodeClass: {
            new (): TNode;
        }, components: Dictionary<ClassType<any>, string>);
        get(): TNode;
        dispose(node: TNode): void;
        cache(node: TNode): void;
        releaseCache(): void;
    }
}

declare module 'ash.ts/core/System' {
    import { Engine } from 'ash.ts/core/Engine';
    export abstract class System {
        previous: System | null;
        next: System | null;
        priority: number;
        abstract addToEngine(engine: Engine): void;
        abstract removeFromEngine(engine: Engine): void;
        abstract update(time: number): void;
    }
}

declare module 'ash.ts/fsm/EntityStateMachine' {
    import { Entity } from 'ash.ts/core/Entity';
    import { EntityState } from 'ash.ts/fsm/EntityState';
    export class EntityStateMachine {
        entity: Entity;
        constructor(entity: Entity);
        addState(name: string, state: EntityState): this;
        createState(name: string): EntityState;
        changeState(name: string): void;
    }
}

declare module 'ash.ts/fsm/EngineStateMachine' {
    import { EngineState } from 'ash.ts/fsm/EngineState';
    import { Engine } from 'ash.ts/core/Engine';
    export class EngineStateMachine {
        engine: Engine;
        constructor(engine: Engine);
        addState(name: string, state: EngineState): this;
        createState(name: string): EngineState;
        changeState(name: string): void;
    }
}

declare module 'ash.ts/tick/ITickProvider' {
    export interface ITickProvider {
        playing: boolean;
        add(listener: (delta: number) => void): void;
        remove(listener: (delta: number) => void): void;
        start(): void;
        stop(): void;
    }
}

declare module 'ash.ts/tick/RAFTickProvider' {
    import { Signal1 } from 'ash.ts/signals/Signal1';
    import { ITickProvider } from 'ash.ts/tick/ITickProvider';
    export class RAFTickProvider extends Signal1<number> implements ITickProvider {
        playing: boolean;
        constructor();
        start(): void;
        stop(): void;
    }
}

declare module 'ash.ts/tools/ComponentPool' {
    export class ComponentPool {
        static get<T>(componentClass: {
            new (): T;
        }): T;
        static dispose<T>(component: T): void;
        static empty(): void;
    }
}

declare module 'ash.ts/tools/ListIteratingSystem' {
    import { Engine } from 'ash.ts/core/Engine';
    import { Node } from 'ash.ts/core/Node';
    import { NodeList } from 'ash.ts/core/NodeList';
    import { System } from 'ash.ts/core/System';
    export abstract class ListIteratingSystem<TNode extends Node<any>> extends System {
        protected nodeList: NodeList<TNode> | null;
        protected nodeClass: {
            new (): TNode;
        };
        protected nodeAdded?: (node: Node<TNode>) => void;
        protected nodeRemoved?: (node: Node<TNode>) => void;
        constructor(nodeClass: {
            new (): TNode;
        });
        addToEngine(engine: Engine): void;
        removeFromEngine(engine: Engine): void;
        update(time: number): void;
        abstract updateNode(node: Node<TNode>, delta: number): void;
    }
}

declare module 'ash.ts/signals/SignalBase' {
    import { ListenerNode } from 'ash.ts/signals/ListenerNode';
    export class SignalBase<TListener> {
        protected head: ListenerNode<TListener> | null;
        protected tail: ListenerNode<TListener> | null;
        constructor();
        protected startDispatch(): void;
        protected endDispatch(): void;
        readonly numListeners: number;
        add(listener: TListener): void;
        addOnce(listener: TListener): void;
        protected addNode(node: ListenerNode<TListener>): void;
        remove(listener: TListener): void;
        removeAll(): void;
    }
}

declare module 'ash.ts/Types' {
    export type ClassType<T> = {
        new (...args: any[]): T;
    };
    export type ClassMap = {
        [key: string]: ClassType<any>;
    };
    export type NativeType = string | number | boolean;
}

declare module 'ash.ts/fsm/EntityState' {
    import { IComponentProvider } from 'ash.ts/fsm/IComponentProvider';
    import { StateComponentMapping } from 'ash.ts/fsm/StateComponentMapping';
    import { Dictionary } from 'ash.ts/Dictionary';
    import { ClassType } from 'ash.ts/Types';
    export class EntityState {
        providers: Dictionary<ClassType<any>, IComponentProvider<any>>;
        add<TComponent>(type: ClassType<TComponent>): StateComponentMapping<TComponent>;
        get<TComponent>(type: ClassType<TComponent>): IComponentProvider<TComponent> | null;
        has<TComponent>(type: ClassType<TComponent>): boolean;
    }
}

declare module 'ash.ts/fsm/EngineState' {
    import { ISystemProvider } from 'ash.ts/fsm/ISystemProvider';
    import { StateSystemMapping } from 'ash.ts/fsm/StateSystemMapping';
    import { System } from 'ash.ts/core/System';
    export class EngineState {
        providers: ISystemProvider<any>[];
        addInstance<TSystem extends System>(system: TSystem): StateSystemMapping<TSystem>;
        addSingleton<TSystem extends System>(type: {
            new (...args: any[]): TSystem;
        }): StateSystemMapping<TSystem>;
        addMethod<TSystem extends System>(method: () => TSystem): StateSystemMapping<TSystem>;
        addProvider<TSystem extends System>(provider: ISystemProvider<TSystem>): StateSystemMapping<TSystem>;
    }
}

declare module 'ash.ts/signals/ListenerNode' {
    export class ListenerNode<TListener> {
        previous: ListenerNode<TListener> | null;
        next: ListenerNode<TListener> | null;
        listener: TListener | null;
        once: boolean;
    }
}

declare module 'ash.ts/fsm/IComponentProvider' {
    export interface IComponentProvider<TComponent> {
        getComponent(): TComponent;
        identifier: any;
    }
}

declare module 'ash.ts/fsm/StateComponentMapping' {
    import { EntityState } from 'ash.ts/fsm/EntityState';
    import { IComponentProvider } from 'ash.ts/fsm/IComponentProvider';
    export class StateComponentMapping<TComponent> {
        constructor(creatingState: EntityState, type: {
            new (...args: any[]): TComponent;
        });
        withInstance(component: TComponent): this;
        withType(type: {
            new (...args: any[]): TComponent;
        }): this;
        withSingleton(type?: {
            new (...args: any[]): any;
        }): this;
        withMethod(method: () => TComponent): this;
        withProvider(provider: IComponentProvider<TComponent>): this;
        add<TComponent>(type: {
            new (...args: any[]): TComponent;
        }): StateComponentMapping<TComponent>;
    }
}

declare module 'ash.ts/fsm/ISystemProvider' {
    import { System } from 'ash.ts/core/System';
    export interface ISystemProvider<TSystem extends System> {
        getSystem(): TSystem;
        identifier: any;
        priority: number;
    }
}

declare module 'ash.ts/fsm/StateSystemMapping' {
    import { EngineState } from 'ash.ts/fsm/EngineState';
    import { ISystemProvider } from 'ash.ts/fsm/ISystemProvider';
    import { System } from 'ash.ts/core/System';
    export class StateSystemMapping<TSystem extends System> {
        constructor(creatingState: EngineState, provider: ISystemProvider<TSystem>);
        withPriority(priority: number): StateSystemMapping<TSystem>;
        addInstance(system: TSystem): StateSystemMapping<TSystem>;
        addSingleton(type: {
            new (...args: any[]): TSystem;
        }): StateSystemMapping<TSystem>;
        addMethod(method: () => TSystem): StateSystemMapping<TSystem>;
        addProvider(provider: ISystemProvider<TSystem>): StateSystemMapping<TSystem>;
    }
}

